lpos = .5
p
p +
geom_text(aes(label = yscale(Mean), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
p +
ggplot2::geom_text(aes(label = yscale(Mean), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
p +
ggplot2::geom_text(ggplot2::aes(label = yscale(Mean), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
p +
ggplot2::geom_text(ggplot2::aes(label = yscale(Y), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
rdate[, eval(pp('xnum := as.numeric(', xvar, ')'))]
rdate
p = ggplot2::ggplot(rdate, ggplot2::aes_string(x = xvar, y = 'Y', ymin = 'cibot', ymax = 'citop', fill = catvar)) +
ggplot2::geom_col(width = .5)
if (cis == TRUE) {
p = p + ggplot2::geom_errorbar(width = .1)
}
p = p +
ggplot2::geom_text(ggplot2::aes(label = yscale(Y), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
p = p + ggplot2::geom_segment(ggplot2::aes(x = xnum - .25, xend = xnum + .25, y = Median, yend = Median), size = 1)
p
p = ggplot2::ggplot(rdate, ggplot2::aes_string(x = xvar, y = 'Y', ymin = 'cibot', ymax = 'citop', fill = catvar)) +
ggplot2::geom_col(width = .5)
if (cis == TRUE) {
p = p + ggplot2::geom_errorbar(width = .1)
}
p = p +
ggplot2::geom_text(ggplot2::aes(label = yscale(Y), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
if (medians == TRUE) {
p = p + ggplot2::geom_segment(ggplot2::aes(x = xnum - .2, xend = xnum + .2, y = Median, yend = Median), size = 1)
}
p
bardata
max(c(rdate$Y, rdate$Median))
# Add category labels
lineheight_val = ifelse(cis == TRUE, max(rdate$citop) + .1, max(c(rdate$Y, rdate$Median)) + .1)
lineheight_val
p +
ggplot2::geom_segment(ggplot2::aes(x = x - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL),
data = bardata, size = 2)
bardata
p +
ggplot2::geom_segment(ggplot2::aes(X = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL),
data = bardata, size = 2)
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL),
data = bardata, size = 2)
bardat
bardata
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2)
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/.pt, hjust = 0, vjust = -.9)
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9)
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily)
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
ggplot2::guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily)
#'
#' @param size Text font size
#' @param showtext_font String name of font to be included. Assumes that \code{showtext::showtext_auto()} has been set beforehand. Will set \code{lineheight} to .5 by default to offset \code{showtext} oddness.
#' @param ... To pass to \code{ggpubr::theme_pubr()}.
#' @examples
#'
#' # Example data
#' ggplot(mtcars, aes(x = mpg, y = hp)) + theme_nick()
#'
#' @export
theme_nick <- function(size = 14, showtext_font = NULL, ...) {
if (is.null(showtext_font)) {
font_elem = ggplot2::element_text(family = 'serif', size = size)
} else {
font_elem = ggplot2::element_text(family = showtext_font, size = size, lineheight = .5)
}
ggpubr::theme_pubr(...) +
ggplot2::theme(text= font_elem,
axis.title.y = ggplot2::element_text(hjust = 1, angle = 0))
}
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
ggplot2::guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily)
limits = c(-1, 1.5)
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
ggplot2::guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily) +
scale_x_discrete(labels = scales::label_wrap(10)) +
scale_y_continuous(limits = limits) +
scale_fill_manual(values = catcolor) +
scale_color_manual(values = catcolor)
p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
ggplot2::guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily) +
ggplot2::scale_x_discrete(labels = scales::label_wrap(10)) +
ggplot2::scale_y_continuous(limits = limits) +
ggplot2::scale_fill_manual(values = catcolor) +
ggplot2::scale_color_manual(values = catcolor)
p = p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
ggplot2::guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily) +
ggplot2::scale_x_discrete(labels = scales::label_wrap(10)) +
ggplot2::scale_y_continuous(limits = limits)
p
catcolor = c('A' = 'firebrick', 'B' = 'green')
p +
ggplot2::scale_fill_manual(values = catcolor) +
ggplot2::scale_color_manual(values = catcolor)
#' @param lpos Y-value height of the mean text labels
#' @param tfamily Font family for theme (will use \code{showtext_font} in \code{theme_nick()})
#' @param tsize Font size for theme
#' @param help_ordering Reorder the levels of the \code{xvar} variable so that they're ordered within values of \code{catvar}.
#' @param savedata Save the graphed data to CSV file by this name.
#' @examples
#'
#' # Not now
#'
#' @export
dynamite_plot = function(dat_orig, xvar, catvar, yvar, yscale = scales::label_number(big.mark = ','), catcolor = NULL,
limits = NULL, cis = TRUE, medians = TRUE, hjust = ifelse(cis == TRUE, 1.5, .5), lpos = .5,
lcolor = 'white', lfamily = 'serif', lsize = 14/ggplot2::.pt, tfamily = NULL, tsize = 14, help_ordering = TRUE, savedata = NULL) {
dat = copy(dat_orig)
data.table::setDT(dat)
data.table::setnames(dat, yvar, 'OUTCOME')
if (max(dat[, eval(pp('.(NU = uniqueN(', catvar, '))')), by = xvar]$NU) > 1) {
stop('Each xvar must be associated with no more than one catvar.')
}
# Ensure catvar is ordered
if (!is.ordered(dat[[catvar]])) {
dat[, eval(pp(catvar, ' := ', ' factor(', catvar, ', ordered = TRUE)'))]
}
# And order xvar
if (help_ordering == TRUE) {
xlevs = dat[, eval(pp('.(cat = first(', catvar, '))')), by = xvar]
setorderv(xlevs, c('cat', xvar))
dat[, eval(pp(xvar, ' := factor(', xvar, ', levels = xlevs$', xvar, ')'))]
}
setorderv(dat, c(catvar, xvar))
rdate = dat[, list(Y = mean_rm(OUTCOME),
Median = quantile_rm(OUTCOME),
citop = mean_rm(OUTCOME) + 1.96*sd_rm(OUTCOME)/sqrt(.N),
cibot = mean_rm(OUTCOME) - 1.96*sd_rm(OUTCOME)/sqrt(.N)), by = c(catvar, xvar)]
rdate = rdate[Y != citop]
rdate[, eval(pp('xnum := as.numeric(', xvar, ')'))]
if (!is.null(savedata)) {
fwrite(rdate, savedata)
}
bardata = dat[, eval(pp('.(cat = first(', catvar, '))')), by = xvar]
setnames(bardata, c('X', 'CAT'))
bardata[, X := as.numeric(X)]
lastX = max(bardata$X)
bardata = bardata[, .(X = first(X)), by = CAT]
bardata[, xend := shift(X, -1)]
bardata[.N, xend := lastX+.5]
p = ggplot2::ggplot(rdate, ggplot2::aes_string(x = xvar, y = 'Y', ymin = 'cibot', ymax = 'citop', fill = catvar)) +
ggplot2::geom_col(width = .5)
if (cis == TRUE) {
p = p + ggplot2::geom_errorbar(width = .1)
}
p = p +
ggplot2::geom_text(ggplot2::aes(label = yscale(Y), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
if (medians == TRUE) {
p = p + ggplot2::geom_segment(ggplot2::aes(x = xnum - .2, xend = xnum + .2, y = Median, yend = Median), size = 1)
}
# Add category labels
lineheight_val = ifelse(cis == TRUE, max(rdate$citop) + .1, max(c(rdate$Y, rdate$Median)) + .1)
p = p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
ggplot2::guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily) +
ggplot2::scale_x_discrete(labels = scales::label_wrap(10)) +
ggplot2::scale_y_continuous(limits = limits, labels = yscale)
if (!is.null(catcolor)) {
p = p +
ggplot2::scale_fill_manual(values = catcolor) +
ggplot2::scale_color_manual(values = catcolor)
}
return(p)
}
#' @param lpos Y-value height of the mean text labels
#' @param tfamily Font family for theme (will use \code{showtext_font} in \code{theme_nick()})
#' @param tsize Font size for theme
#' @param help_ordering Reorder the levels of the \code{xvar} variable so that they're ordered within values of \code{catvar}.
#' @param savedata Save the graphed data to CSV file by this name.
#' @examples
#'
#' # Not now
#'
#' @export
grouped_colorlab_bar = function(dat_orig, xvar, catvar, yvar, yscale = scales::label_number(big.mark = ','), catcolor = NULL,
limits = NULL, cis = TRUE, medians = TRUE, hjust = ifelse(cis == TRUE, 1.5, .5), lpos = .5,
lcolor = 'white', lfamily = 'serif', lsize = 14/ggplot2::.pt, tfamily = NULL, tsize = 14, help_ordering = TRUE, savedata = NULL) {
dat = copy(dat_orig)
data.table::setDT(dat)
data.table::setnames(dat, yvar, 'OUTCOME')
if (max(dat[, eval(pp('.(NU = uniqueN(', catvar, '))')), by = xvar]$NU) > 1) {
stop('Each xvar must be associated with no more than one catvar.')
}
# Ensure catvar is ordered
if (!is.ordered(dat[[catvar]])) {
dat[, eval(pp(catvar, ' := ', ' factor(', catvar, ', ordered = TRUE)'))]
}
# And order xvar
if (help_ordering == TRUE) {
xlevs = dat[, eval(pp('.(cat = first(', catvar, '))')), by = xvar]
setorderv(xlevs, c('cat', xvar))
dat[, eval(pp(xvar, ' := factor(', xvar, ', levels = xlevs$', xvar, ')'))]
}
setorderv(dat, c(catvar, xvar))
rdate = dat[, list(Y = mean_rm(OUTCOME),
Median = quantile_rm(OUTCOME),
citop = mean_rm(OUTCOME) + 1.96*sd_rm(OUTCOME)/sqrt(.N),
cibot = mean_rm(OUTCOME) - 1.96*sd_rm(OUTCOME)/sqrt(.N)), by = c(catvar, xvar)]
rdate = rdate[Y != citop]
rdate[, eval(pp('xnum := as.numeric(', xvar, ')'))]
if (!is.null(savedata)) {
fwrite(rdate, savedata)
}
bardata = dat[, eval(pp('.(cat = first(', catvar, '))')), by = xvar]
setnames(bardata, c('X', 'CAT'))
bardata[, X := as.numeric(X)]
lastX = max(bardata$X)
bardata = bardata[, .(X = first(X)), by = CAT]
bardata[, xend := shift(X, -1)]
bardata[.N, xend := lastX+.5]
p = ggplot2::ggplot(rdate, ggplot2::aes_string(x = xvar, y = 'Y', ymin = 'cibot', ymax = 'citop', fill = catvar)) +
ggplot2::geom_col(width = .5)
if (cis == TRUE) {
p = p + ggplot2::geom_errorbar(width = .1)
}
p = p +
ggplot2::geom_text(ggplot2::aes(label = yscale(Y), y = lpos),
family = lfamily, size = lsize, color = lcolor, fontface = 'bold')
if (medians == TRUE) {
p = p + ggplot2::geom_segment(ggplot2::aes(x = xnum - .2, xend = xnum + .2, y = Median, yend = Median), size = 1)
}
# Add category labels
lineheight_val = ifelse(cis == TRUE, max(rdate$citop) + .1, max(c(rdate$Y, rdate$Median)) + .1)
p = p +
ggplot2::geom_segment(ggplot2::aes(x = X - .5, xend = xend, color = CAT, y = lineheight_val, yend = lineheight_val, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, size = 2) +
ggplot2::geom_text(ggplot2::aes(x = X - .5, y = lineheight_val, label = CAT, color = CAT, ymin = NULL, ymax = NULL, fill = NULL),
data = bardata, family = lfamily, size = 20/ggplot2::.pt, hjust = 0, vjust = -.9) +
ggplot2::guides(fill = 'none', color = 'none') +
theme_nick(size = tsize, showtext_font = tfamily) +
ggplot2::scale_x_discrete(labels = scales::label_wrap(10)) +
ggplot2::scale_y_continuous(limits = limits, labels = yscale)
if (!is.null(catcolor)) {
p = p +
ggplot2::scale_fill_manual(values = catcolor) +
ggplot2::scale_color_manual(values = catcolor)
}
return(p)
}
dat
dat_orig
grouped_colorlab_bar(dat_orig, 'gr', 'cat', 'value', scales::label_number(accuracy = .1))
grouped_colorlab_bar(dat_orig, 'gr', 'cat', 'value', scales::label_number(accuracy = .1), limits = c(-.75, 1.5))
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = hp, color = factor(am)) + geom_point())
ggplot(mtcars, aes(x = mpg, y = hp, color = factor(am)) + geom_point()
ggplot(mtcars, aes(x = mpg, y = hp, color = factor(am))) + geom_point()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(nicksshorts)
help(weighted.mean)
#' @param x Value to take the mean of
#' @param w Weights
#' @param ... Other arguments to pass along
#'
#' @examples
#'
#' # Example data
#' weighted_mean_rm(c(NA,1,2),c(1,NA,2))
#'
#' @export
weighted_mean_rm = function(x, w, ...) {
weighted.mean(x[!is.na(x) & !is.na(w)], w[!is.na(x) & !is.na(w)], ...)
}
weighted_mean_rm(c(NA,1,2),c(1,NA,2))
weighted_mean_rm(c(NA,1,2),c(1,NA,0))
#'
#' @param x Value to take the median of
#' @param w Weights
#'
#' @examples
#'
#' # Example data
#' weighted_median_rm(c(NA,1,2,3,4),c(1,NA,2,3,10))
#'
#' @export
weighted_median_rm = function(x, w) {
dat = data.table(x=x, w=w)
dat = na.omit(dat)
if (nrow(dat) == 0) {
return(NA)
}
if (nrow(dat) == 1) {
return(dat[, x])
}
setorder(dat, x)
dat[, cumw := cumsum(w)/sum(w)]
if (dat[1, cumw] >= .5) {
return(dat[1, x])
}
return(dat[cumw >= .5 & shift(cumw) < .5, x])
}
weighted_median_rm(c(NA,1,2,3,4),c(1,NA,2,3,10))
library(data.table)
weighted_median_rm(c(NA,1,2,3,4),c(1,NA,2,3,10))
formula = y~x
dat = mtcars
formula = mpg~hp
y = NULL
x = NULL
se = TRUE
p = TRUE
m = fixest::feols(formula, dat, ...)
m = fixest::feols(formula, dat)
m
coef(m)
se(m)
m$coeftable
res = m$coeftable$Estimate[2]
res = c(res, m$coeftable$`Std. Error`[2])
res = c(res, m$coeftable$`Pr(>|t|)`[2])
res
names(res) = c('Estimate','SE','p')[1:length(res)]
res
#' @param se Instead of just returning the coefficient, pass a vector that also includes the standard error.
#' @param p Instead of just returning the coefficient, pass a vector that also includes the p-value (will be third element if \code{se = TRUE}).
#' @param names Name the return vector
#' @param ... Other arguments to pass to \code{fixest::feols}
#' @examples
#'
#' # Example data
#' eval(pp('2','+','2'))
#'
#' @export
linear_slope = function(dat = NULL, formula = NULL, y = NULL, x = NULL, se = FALSE, p = FALSE, names = (se | p), ...) {
if ((is.null(formula) | is.null(dat)) & (is.null(y) | is.null(x))) {
stop('Must specify data and formula or x and y.')
}
if (is.null(dat) & is.null(formula)) {
formula = y~x
dat = data.table(y = y, x = x)
}
m = fixest::feols(formula, dat, ...)
res = m$coeftable$Estimate[2]
if (se == TRUE) {
res = c(res, m$coeftable$`Std. Error`[2])
}
if (p == TRUE) {
res = c(res, m$coeftable$`Pr(>|t|)`[2])
}
names(res) = c('Estimate','SE','p')[1:length(res)]
return(res)
}
linear_slope(mtcars, mpg~hp)
#' @param se Instead of just returning the coefficient, pass a vector that also includes the standard error.
#' @param p Instead of just returning the coefficient, pass a vector that also includes the p-value (will be third element if \code{se = TRUE}).
#' @param names Name the return vector
#' @param ... Other arguments to pass to \code{fixest::feols}
#' @examples
#'
#' # Example data
#' eval(pp('2','+','2'))
#'
#' @export
linear_slope = function(dat = NULL, formula = NULL, y = NULL, x = NULL, se = FALSE, p = FALSE, names = (se | p), ...) {
if ((is.null(formula) | is.null(dat)) & (is.null(y) | is.null(x))) {
stop('Must specify data and formula or x and y.')
}
if (is.null(dat) & is.null(formula)) {
formula = y~x
dat = data.table(y = y, x = x)
}
m = fixest::feols(formula, dat, ...)
res = m$coeftable$Estimate[2]
if (se == TRUE) {
res = c(res, m$coeftable$`Std. Error`[2])
}
if (p == TRUE) {
res = c(res, m$coeftable$`Pr(>|t|)`[2])
}
if (names) {
names(res) = c('Estimate','SE','p')[1:length(res)]
}
return(res)
}
linear_slope(mtcars, mpg~hp)
linear_slope(mtcars, mpg~hp, se = TRUE)
linear_slope(mtcars, mpg~hp, p = TRUE)
#' @param se Instead of just returning the coefficient, pass a vector that also includes the standard error.
#' @param p Instead of just returning the coefficient, pass a vector that also includes the p-value (will be third element if \code{se = TRUE}).
#' @param names Name the return vector
#' @param ... Other arguments to pass to \code{fixest::feols}
#' @examples
#'
#' # Example data
#' eval(pp('2','+','2'))
#'
#' @export
linear_slope = function(dat = NULL, formula = NULL, y = NULL, x = NULL, se = FALSE, p = FALSE, names = (se | p), ...) {
if ((is.null(formula) | is.null(dat)) & (is.null(y) | is.null(x))) {
stop('Must specify data and formula or x and y.')
}
if (is.null(dat) & is.null(formula)) {
formula = y~x
dat = data.table(y = y, x = x)
}
m = fixest::feols(formula, dat, ...)
res = m$coeftable$Estimate[2]
namevec = c('Estimate')
if (se == TRUE) {
res = c(res, m$coeftable$`Std. Error`[2])
namevec = c(namevec, 'SE')
}
if (p == TRUE) {
res = c(res, m$coeftable$`Pr(>|t|)`[2])
namevec = c(namevec, 'p')
}
if (names) {
names(res) = namevec
}
return(res)
}
linear_slope(mtcars, mpg~hp, p = TRUE)
linear_slope(mtcars, mpg~hp, p = TRUE, se = TRUE)
linear_slope(mtcars, mpg~hp, p = TRUE, se = TRUE, names = FALSE)
linear_slope(y = mtcars$mpg, x = mtcars$hp)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(nicksshorts)
library(data.table)
county_pop = fread('C:/Users/nickc/Downloads/co-est2021-alldata.csv')
county_pop
state_pop = county_pop[SUMLEV == 40]
state_pop
state_pop[SUMLEV := NULL]
state_pop[,SUMLEV := NULL]
head(state_pop)
setnames(state_pop, c('REGION','DIVISION','STATE','STNAME'),c('census_region','census_division','state_fips','statename'))
state_pop[, COUNTY := NULL]
state_pop[, CTYNAME := NULL]
state_pop
data(state_info)
state_info
merge(state_pop, state_info[, .(state_fips, region)], by = 'state_fips')
merge(state_pop, state_info[, .(as.numeric(state_fips), region)], by = 'state_fips')
merge(state_pop, state_info[, .(state_fips = as.numeric(state_fips), region)], by = 'state_fips')
test = merge(state_pop, state_info[, .(state_fips = as.numeric(state_fips), region)], by = 'state_fips')
state_pop = merge(state_pop, state_info[, .(state_fips = as.numeric(state_fips), region)], by = 'state_fips')
usethis::use_data(state_pop)
county_pop
county_pop = county_pop[SUMLEV == 50]
county_pop[, SUMLEV := NULL]
county_popp
county_pop
setnames(county_pop, c('REGION','DIVISION','STATE','STNAME','COUNTY','CTYNAME'),c('census_region','census_division','state_fips','statename','county_fips','countyname'))
head(county_pop)
county_pop = merge(county_pop, state_info[, .(state_fips = as.numeric(state_fips), region)], by = 'state_fips')
county_pop[, full_fips := paste0(str_pad(state_fips,2,'0','left'),str_pad(county_fips,3,'0','left'))]
county_pop[, full_fips := paste0(stringr::str_pad(state_fips,2,'0','left'),stringr::str_pad(county_fips,3,'0','left'))]
county_pop[, full_fips := paste0(stringr::str_pad(state_fips,2,'left','0'),stringr::str_pad(county_fips,3,'left','0'))]
county_pop
usethis::use_data(county_pop)
roxygen2::roxygenise()
library(nicksshorts)
