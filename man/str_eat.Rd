% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shortcut_functions.R
\name{str_eat}
\alias{str_eat}
\title{Subset a string up to (or after) a marker substring}
\usage{
str_eat(
  string,
  pattern,
  keep = "left",
  direction = "left",
  trim = FALSE,
  keep_nonmatch = "blank"
)
}
\arguments{
\item{string}{Input vector. Either a character vector, or something coercible to one.}

\item{pattern}{Pattern to look for. See \code{stringr::str_locate} for more details.}

\item{keep}{Do you want the text to the 'left' of the match, the 'match' itself, or to the 'right' of the match? Accepts a vector to keep multiple options.}

\item{direction}{Look for the first match coming from the 'left' or the 'right'?}

\item{trim}{Apply a \code{stringr::str_trim()} after getting the substring.}

\item{keep_nonmatch}{Set to 'full' to return the original string if the match isn't found. Set to 'blank' to return a blank string if no match is found. Set to 'NA' to return a missing value if no match is found.}
}
\description{
This takes a string (or vector of strings) and looks for the first regex match. Then, it returns the content of that string up to that match (or following the match, as desired).
}
\details{
It's called \code{str_eat} because you often use it on messy string data, "eating" it from the left as you chomp it piece by piece into processed pieces.
}
